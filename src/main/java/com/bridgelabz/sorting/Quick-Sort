4. Quick Sort (Divide and Conquer)

Quick Sort is another Divide and Conquer algorithm that selects a pivot element, partitions the
array around it, and recursively sorts the left and right sub-arrays.

Concept:
● Picks a pivot, partitions the array, and sorts recursively.
● Efficient for large datasets.

Working Mechanism:
1. Choose a Pivot: Select an element (commonly the last element, first element, or a
random element).
2. Partition: Rearrange elements such that elements smaller than the pivot move to the
left, and elements greater than the pivot move to the right.
3. Recursive Sorting: Apply Quick Sort on the left and right partitions.
4. The process continues until the entire array is sorted.

Performance Analysis:
● Best Case: O(n log n) (Balanced partitions)
● Average Case: O(n log n) (Efficient for random distributions)
● Worst Case (Already Sorted or Reverse Sorted): O(n²) (Occurs if poor pivot selection
leads to unbalanced partitions)
● Space Complexity: O(log n) (Recursive stack space)
● Stability: Not stable (Swapping may change the relative order of equal elements)
Use Cases:
● Suitable for large datasets, particularly when implemented with a randomized pivot to
avoid worst-case performance.
● Commonly used in database indexing and high-performance applications.

Time Complexity:
● Best Case: O(n log n)
● Average Case: O(n log n)
● Worst Case (Already Sorted): O(n²) (Can be improved using randomized pivot)
● Space Complexity: O(log n) (Recursive calls)